package com.bbng.dao.util.fileUpload.services;

import lombok.extern.slf4j.Slf4j;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

@Slf4j
public class PdfGenerator {

    public static ByteArrayOutputStream createCommissionReportPdf(
            String imageLogo, String message, String date, String merchantEmail,
            long totalTransaction, long totalSpending, double totalCommissionPercent,
            long commissionEarned
    ) throws Exception {
        // Create a new PDF document
        log.info("logging image logo, {}", imageLogo);
        PDDocument document = new PDDocument();
        PDPage page = new PDPage();
        document.addPage(page);

        // Output stream for the PDF
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
            // Load the logo image
            PDImageXObject logo = loadLogoImage(document, imageLogo);

            // Draw the logo at the top center
            contentStream.drawImage(logo, 240, 720, 100, 50);

            // Set title
            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 14);
            contentStream.setNonStrokingColor(Color.BLACK);
            contentStream.beginText();
            contentStream.newLineAtOffset(200, 690);
            contentStream.showText(message);
            contentStream.endText();

            // Subtitle
            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 10);
            contentStream.setNonStrokingColor(Color.GRAY);
            contentStream.beginText();
            contentStream.newLineAtOffset(170, 675);
            contentStream.showText("This receipt was autogenerated on " + date);
            contentStream.endText();

            // Draw table with details
            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 10);
            contentStream.setNonStrokingColor(Color.BLACK);

            float tableY = 630;
            float leftMargin = 80;

            // Draw each row
            drawTableRow(contentStream, "Date/Time", date, leftMargin, tableY);
            drawTableRow(contentStream, "Merchant Email", merchantEmail, leftMargin, tableY - 20);
            drawTableRow(contentStream, "Total Transactions", Long.toString(totalTransaction), leftMargin, tableY - 40);
            drawTableRow(contentStream, "Amount Generated", "NGN " + String.format("%,.2f", totalSpending), leftMargin, tableY - 60);
            drawTableRow(contentStream, "Commission Earned (" + totalCommissionPercent + "%)", "NGN " + String.format("%,.2f", commissionEarned), leftMargin, tableY - 80);

            // Footer
            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 8);
            contentStream.setNonStrokingColor(Color.GRAY);
            contentStream.beginText();
            contentStream.newLineAtOffset(50, 70);
            contentStream.showText("This is an automated email alert service. For enquiries on redtech's products and services, please send an email to help@redtech.com");
            contentStream.endText();

            // Footer icons (placeholders for simplicity)
            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 8);
            contentStream.setNonStrokingColor(Color.BLUE);
            contentStream.beginText();
            contentStream.newLineAtOffset(50, 40);
            contentStream.showText("Â© Redtech 2025. All rights reserved");
            contentStream.endText();
        }

        // Save the PDF to ByteArrayOutputStream
        document.save(baos);
        document.close();

        return baos;
    }

    private static PDImageXObject loadLogoImage(PDDocument document, String imageUrl) throws IOException {
        URL url = new URL(imageUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setDoInput(true);
        connection.connect();
        try (var input = connection.getInputStream()) {
            return PDImageXObject.createFromByteArray(document, input.readAllBytes(), "logo");
        }
    }

    private static void drawTableRow(PDPageContentStream contentStream, String label, String value, float x, float y) throws IOException {
        contentStream.beginText();
        contentStream.newLineAtOffset(x, y);
        contentStream.showText(label);
        contentStream.endText();

        contentStream.beginText();
        contentStream.newLineAtOffset(x + 150, y);
        contentStream.showText(value);
        contentStream.endText();
    }
}
